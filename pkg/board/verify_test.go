package board

import "testing"

func TestVerifyColumn(t *testing.T) {
	type args struct {
		board  SudokuBoard
		column int
	}
	type want struct {
		expect      bool
		shouldPanic bool
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "Valid Full Column (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, -1, -1, -1, -1, -1, -1, -1, -1},
						{2, -1, -1, -1, -1, -1, -1, -1, -1},
						{3, -1, -1, -1, -1, -1, -1, -1, -1},
						{4, -1, -1, -1, -1, -1, -1, -1, -1},
						{5, -1, -1, -1, -1, -1, -1, -1, -1},
						{6, -1, -1, -1, -1, -1, -1, -1, -1},
						{7, -1, -1, -1, -1, -1, -1, -1, -1},
						{8, -1, -1, -1, -1, -1, -1, -1, -1},
						{9, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Column (4)",
			args: args{
				column: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, 1, -1, -1, -1, -1},
						{-1, -1, -1, -1, 2, -1, -1, -1, -1},
						{-1, -1, -1, -1, 3, -1, -1, -1, -1},
						{-1, -1, -1, -1, 4, -1, -1, -1, -1},
						{-1, -1, -1, -1, 5, -1, -1, -1, -1},
						{-1, -1, -1, -1, 6, -1, -1, -1, -1},
						{-1, -1, -1, -1, 7, -1, -1, -1, -1},
						{-1, -1, -1, -1, 8, -1, -1, -1, -1},
						{-1, -1, -1, -1, 9, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Column (8)",
			args: args{
				column: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, 1},
						{-1, -1, -1, -1, -1, -1, -1, -1, 2},
						{-1, -1, -1, -1, -1, -1, -1, -1, 3},
						{-1, -1, -1, -1, -1, -1, -1, -1, 4},
						{-1, -1, -1, -1, -1, -1, -1, -1, 5},
						{-1, -1, -1, -1, -1, -1, -1, -1, 6},
						{-1, -1, -1, -1, -1, -1, -1, -1, 7},
						{-1, -1, -1, -1, -1, -1, -1, -1, 8},
						{-1, -1, -1, -1, -1, -1, -1, -1, 9},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Column (6)",
			args: args{
				column: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, 1, -1, -1},
						{-1, -1, -1, -1, -1, -1, 2, -1, -1},
						{-1, -1, -1, -1, -1, -1, 3, -1, -1},
						{-1, -1, -1, -1, -1, -1, 4, -1, -1},
						{-1, -1, -1, -1, -1, -1, 5, -1, -1},
						{-1, -1, -1, -1, -1, -1, 6, -1, -1},
						{-1, -1, -1, -1, -1, -1, 7, -1, -1},
						{-1, -1, -1, -1, -1, -1, 8, -1, -1},
						{-1, -1, -1, -1, -1, -1, 9, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Invalid Full Column (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, -1, -1, -1, -1, -1, -1, -1, -1},
						{2, -1, -1, -1, -1, -1, -1, -1, -1},
						{3, -1, -1, -1, -1, -1, -1, -1, -1},
						{4, -1, -1, -1, -1, -1, -1, -1, -1},
						{9, -1, -1, -1, -1, -1, -1, -1, -1},
						{6, -1, -1, -1, -1, -1, -1, -1, -1},
						{7, -1, -1, -1, -1, -1, -1, -1, -1},
						{8, -1, -1, -1, -1, -1, -1, -1, -1},
						{9, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Column (4)",
			args: args{
				column: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, 1, -1, -1, -1, -1},
						{-1, -1, -1, -1, 2, -1, -1, -1, -1},
						{-1, -1, -1, -1, 3, -1, -1, -1, -1},
						{-1, -1, -1, -1, 4, -1, -1, -1, -1},
						{-1, -1, -1, -1, 9, -1, -1, -1, -1},
						{-1, -1, -1, -1, 6, -1, -1, -1, -1},
						{-1, -1, -1, -1, 7, -1, -1, -1, -1},
						{-1, -1, -1, -1, 8, -1, -1, -1, -1},
						{-1, -1, -1, -1, 9, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Column (8)",
			args: args{
				column: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, 1},
						{-1, -1, -1, -1, -1, -1, -1, -1, 2},
						{-1, -1, -1, -1, -1, -1, -1, -1, 3},
						{-1, -1, -1, -1, -1, -1, -1, -1, 4},
						{-1, -1, -1, -1, -1, -1, -1, -1, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, 6},
						{-1, -1, -1, -1, -1, -1, -1, -1, 7},
						{-1, -1, -1, -1, -1, -1, -1, -1, 8},
						{-1, -1, -1, -1, -1, -1, -1, -1, 9},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Column (6)",
			args: args{
				column: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, 1, -1, -1},
						{-1, -1, -1, -1, -1, -1, 2, -1, -1},
						{-1, -1, -1, -1, -1, -1, 3, -1, -1},
						{-1, -1, -1, -1, -1, -1, 4, -1, -1},
						{-1, -1, -1, -1, -1, -1, 9, -1, -1},
						{-1, -1, -1, -1, -1, -1, 6, -1, -1},
						{-1, -1, -1, -1, -1, -1, 7, -1, -1},
						{-1, -1, -1, -1, -1, -1, 8, -1, -1},
						{-1, -1, -1, -1, -1, -1, 9, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid data",
			args: args{
				column: 0,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{shouldPanic: true},
		},
		{
			name: "empty data",
			args: args{
				column: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "incomplete data",
			args: args{
				column: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 1, -1, -1, -1, -1},
						{-1, -1, -1, -1, 2, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 3, -1, -1, -1, -1},
						{-1, -1, -1, -1, 4, -1, -1, -1, -1},
						{-1, -1, -1, -1, 0, -1, -1, -1, -1},
						{-1, -1, -1, -1, 5, -1, -1, -1, -1},
						{-1, -1, -1, -1, 6, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					if tt.want.shouldPanic {
						t.Errorf("VerifyColumn() did not panic")
					}
				} else if !tt.want.shouldPanic {
					t.Errorf("VerifyColumn() panicked: %s", r)
				}
			}()

			if got := VerifyColumn(&tt.args.board, tt.args.column); got != tt.want.expect {
				t.Errorf("VerifyColumn() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVerifyRow(t *testing.T) {
	type args struct {
		board SudokuBoard
		row   int
	}
	type want struct {
		expect      bool
		shouldPanic bool
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "Valid Full Row (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, 2, 3, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Row (4)",
			args: args{
				row: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 3, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Row (8)",
			args: args{
				row: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 3, 4, 5, 6, 7, 8, 9},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Row (6)",
			args: args{
				row: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 3, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Invalid Full Row (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, 2, 7, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Row (4)",
			args: args{
				row: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 7, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Row (8)",
			args: args{
				row: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 7, 4, 5, 6, 7, 8, 9},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Row (6)",
			args: args{
				row: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 7, 4, 5, 6, 7, 8, 9},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid data",
			args: args{
				row: 0,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{shouldPanic: true},
		},
		{
			name: "empty data",
			args: args{
				row: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{0, 0, 0, 0, 0, 0, 0, 0, 0},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "incomplete data",
			args: args{
				row: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{0, 1, 2, 3, 0, 4, 5, 6, 0},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					if tt.want.shouldPanic {
						t.Errorf("VerifyRow() did not panic")
					}
				} else if !tt.want.shouldPanic {
					t.Errorf("VerifyRow() panicked: %s", r)
				}
			}()

			if got := VerifyRow(&tt.args.board, tt.args.row); got != tt.want.expect {
				t.Errorf("VerifyRow() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVerifyRegion(t *testing.T) {
	type args struct {
		board  SudokuBoard
		region int
	}
	type want struct {
		expect      bool
		shouldPanic bool
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "Valid Full Region (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, 2, 3, -1, -1, -1, -1, -1, -1},
						{4, 5, 6, -1, -1, -1, -1, -1, -1},
						{7, 8, 9, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Region (4)",
			args: args{
				region: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, 1, 2, 3, -1, -1, -1},
						{-1, -1, -1, 4, 5, 6, -1, -1, -1},
						{-1, -1, -1, 7, 8, 9, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Region (8)",
			args: args{
				region: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, 1, 2, 3},
						{-1, -1, -1, -1, -1, -1, 4, 5, 6},
						{-1, -1, -1, -1, -1, -1, 7, 8, 9},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Valid Full Region (6)",
			args: args{
				region: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 3, -1, -1, -1, -1, -1, -1},
						{4, 5, 6, -1, -1, -1, -1, -1, -1},
						{7, 8, 9, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "Invalid Full Region (0)",
			args: args{
				board: SudokuBoard{
					board: [9][9]int{
						{1, 2, 3, -1, -1, -1, -1, -1, -1},
						{4, 9, 6, -1, -1, -1, -1, -1, -1},
						{7, 8, 9, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Region (4)",
			args: args{
				region: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, 1, 5, 3, -1, -1, -1},
						{-1, -1, -1, 4, 5, 6, -1, -1, -1},
						{-1, -1, -1, 7, 8, 9, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Region (8)",
			args: args{
				region: 8,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, 1, 2, 3},
						{-1, -1, -1, -1, -1, -1, 6, 5, 6},
						{-1, -1, -1, -1, -1, -1, 7, 8, 9},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid Full Region (6)",
			args: args{
				region: 6,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{1, 2, 7, -1, -1, -1, -1, -1, -1},
						{4, 5, 6, -1, -1, -1, -1, -1, -1},
						{7, 8, 9, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: false},
		},
		{
			name: "Invalid data",
			args: args{
				region: 0,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{shouldPanic: true},
		},
		{
			name: "empty data",
			args: args{
				region: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, 0, 0, 0, -1, -1, -1},
						{-1, -1, -1, 0, 0, 0, -1, -1, -1},
						{-1, -1, -1, 0, 0, 0, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
		{
			name: "incomplete data",
			args: args{
				region: 4,
				board: SudokuBoard{
					board: [9][9]int{
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, 0, 0, 0, -1, -1, -1},
						{-1, -1, -1, 7, 1, 2, -1, -1, -1},
						{-1, -1, -1, 6, 5, 3, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1, -1},
					},
				},
			},
			want: want{expect: true},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					if tt.want.shouldPanic {
						t.Errorf("VerifyRegion() did not panic")
					}
				} else if !tt.want.shouldPanic {
					t.Errorf("VerifyRegion() panicked: %s", r)
				}
			}()

			if got := VerifyRegion(&tt.args.board, tt.args.region); got != tt.want.expect {
				t.Errorf("VerifyRegion() = %v, want %v", got, tt.want)
			}
		})
	}
}
